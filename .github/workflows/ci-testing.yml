name: CI testing

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on: # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  pytest:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # max-parallel: 6
      matrix:
        # PyTorch 1.5 is failing on Win and bolts requires torchvision>=0.5
        os: [ubuntu-20.04, macOS-10.15, windows-2019]
        python-version: [3.6, 3.8]
        requires: ['minimal', 'latest']
        topic: ['devel']
        include:
          - os: ubuntu-20.04
            python-version: 3.8
            requires: 'latest'
            topic: 'image'
          - os: ubuntu-20.04
            python-version: 3.8
            requires: 'latest'
            topic: 'video'
          - os: ubuntu-20.04
            python-version: 3.8
            requires: 'latest'
            topic: 'tabular'
          - os: ubuntu-20.04
            python-version: 3.8
            requires: 'latest'
            topic: 'text'
          - os: ubuntu-20.04
            python-version: 3.8
            requires: 'latest'
            topic: 'image_style_transfer'
          - os: ubuntu-20.04
            python-version: 3.8
            requires: 'latest'
            topic: 'serve'

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 35

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646
    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install libomp  # https://github.com/pytorch/pytorch/issues/20030

    - name: Install graphviz
      if: matrix.topic == 'serve'
      run: |
        sudo apt-get install graphviz

    - name: Set min. dependencies
      if: matrix.requires == 'minimal'
      run: |
        python -c "req = open('requirements.txt').read().replace('>', '=') ; open('requirements.txt', 'w').write(req)"

    - name: Filter requirements
      run: |
        import sys
        if sys.version_info.minor < 7:
          fname = 'requirements.txt'
          lines = [line for line in open(fname).readlines() if not line.startswith('pytorchvideo')]
          open(fname, 'w').writelines(lines)
      shell: python

    # Note: This uses an internal pip API and may not always work
    # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
    - name: Get pip cache
      id: pip-cache
      run: |
        python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.topic }}-${{ matrix.requires }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.topic }}-${{ matrix.requires }}-pip-

    - name: Install dependencies
      run: |
        python --version
        pip --version
        pip install '.[${{ matrix.topic }}]' --pre --upgrade --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
        pip install '.[test]' --pre --upgrade
        pip list
      shell: bash

    - name: Cache datasets
      uses: actions/cache@v2
      with:
        path: data # This path is specific to Ubuntu
        key: lightning-flash-datasets-${{ hashFiles('tests/examples/test_scripts.py') }}
        restore-keys: lightning-flash-datasets-

    - name: Tests
      env:
          FIFTYONE_DO_NOT_TRACK: true
      run: |
        # tox --sitepackages
        python -c "import fiftyone as fo ; print(fo.config.do_not_track)"
        coverage run --source flash -m pytest flash tests -v --junitxml=junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
        coverage xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: failure()

    - name: Statistics
      if: success()
      run: |
        coverage report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false
